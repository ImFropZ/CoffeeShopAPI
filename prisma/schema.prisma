generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  fullName       String         @default("No Name")
  email          String?        @unique
  username       String         @unique
  hashedPassword String
  picture        String?
  role           Role           @default(USER)
  invoices       Invoice[]
  passwordReset  PasswordReset?
}

model Customer {
  id       String    @id @default(uuid())
  name     String    @unique
  phone    String?
  address  String?
  invoices Invoice[]
}

enum Role {
  ADMIN
  STOCK
  CASHIER
  USER
}

model Stock {
  id               String            @id @default(uuid())
  name             String
  items            StockItem[]
  stockReportItems StockReportItem[]
}

model StockItem {
  id               String            @id @default(uuid())
  expiresDate      DateTime
  quantity         Int
  price            Decimal           @db.Decimal(8, 2)
  stock            Stock             @relation(fields: [stockId], references: [id])
  stockId          String
  stockReportItems StockReportItem[]
}

model StockReport {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  stockReportItems StockReportItem[]
}

model StockReportItem {
  id            String      @id @default(uuid())
  quantity      Int
  stock         Stock       @relation(fields: [stockId], references: [id])
  stockId       String
  stockItem     StockItem   @relation(fields: [stockItemId], references: [id])
  stockItemId   String
  stockReport   StockReport @relation(fields: [stockReportId], references: [id])
  stockReportId String
}

model Menu {
  id         String     @id @default(uuid())
  name       String
  drinkType  DrinkType
  menuItems  MenuItem[]
  categories String

  @@unique([name, drinkType])
}

model MenuItem {
  id           String        @id @default(uuid())
  price        Decimal       @db.Decimal(8, 2)
  cupSize      CupSize
  picture      String
  menuId       String
  menu         Menu          @relation(fields: [menuId], references: [id])
  isActive     Boolean       @default(true)
  invoiceItems InvoiceItem[]

  @@unique([menuId, cupSize])
}

model Invoice {
  id         String        @id @default(uuid())
  discount   Decimal       @default(0) @db.Decimal(2, 2)
  subTotal   Decimal       @default(0) @db.Decimal(8, 2)
  total      Decimal       @default(0) @db.Decimal(8, 2)
  createdAt  DateTime      @default(now())
  customerId String?
  customer   Customer?     @relation(fields: [customerId], references: [id])
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  items      InvoiceItem[]
}

model InvoiceItem {
  id         String   @id @default(uuid())
  quantity   Int
  sugar      Float
  ice        Float
  price      Decimal  @default(0) @db.Decimal(8, 2)
  attributes String
  menuId     String
  menuItem   MenuItem @relation(fields: [menuId], references: [id])
  invoiceId  String
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
}

enum CupSize {
  SMALL
  MEDIUM
  LARGE
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

enum DrinkType {
  HOT
  COLD
  FRAPPE
}
